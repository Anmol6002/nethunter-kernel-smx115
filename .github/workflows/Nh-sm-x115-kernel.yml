name: Build SM-X115 Kernel with Patched Defconfig

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout current repo (workflow repo)
      uses: actions/checkout@v3

    - name: Set up environment variables
      run: |
        echo "TOOLCHAIN_DIR=$HOME/gcc-arm64" >> $GITHUB_ENV
        echo "KERNEL_DIR=$HOME/kernel-source" >> $GITHUB_ENV
        echo "OUT_DIR=$HOME/out" >> $GITHUB_ENV
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "SUBARCH=arm64" >> $GITHUB_ENV
        echo "CROSS_COMPILE=$HOME/gcc-arm64/bin/aarch64-elf-" >> $GITHUB_ENV

    - name: Clone arter97 arm64 GCC toolchain
      run: |
        git clone --depth=1 https://github.com/theradcolor/aarch64-elf -b stable-gcc $HOME/gcc-arm64
   
    - name: Clone kernel source
      run: |
        git clone --depth=1 https://github.com/Anmol6002/kernel_smx115_nethunter $KERNEL_DIR

    - name: ðŸ§© Add CAN support submodules and patch kernel tree
      shell: bash
      run: |
        cd $KERNEL_DIR
        mkdir -p drivers/net/can include/uapi/linux/can
        git submodule add https://github.com/V0lk3n/usb-can-2-module drivers/net/can/usb-can-2-module || true
        git submodule add https://github.com/V0lk3n/can-isotp drivers/net/can/can-isotp || true
        git submodule add https://github.com/V0lk3n/elmcan drivers/net/can/elmcan || true
        git submodule update --init --recursive

        {
        echo 'source "drivers/net/can/usb-can-2-module/Kconfig"'
        echo 'source "drivers/net/can/can-isotp/Kconfig"'
        echo ''
        echo 'config CAN_CAN327'
        echo '	tristate "Serial / USB serial ELM327 based OBD-II Interfaces (can327)"'
        echo '	depends on TTY'
        echo '	select CAN_RX_OFFLOAD'
        echo '	help'
        echo '	  CAN driver for several '\''low cost'\'' OBD-II interfaces based on the'
        echo '	  ELM327 OBD-II interpreter chip.'
        echo ''
        echo '	  This is a best effort driver - the ELM327 interface was never'
        echo '	  designed to be used as a standalone CAN interface. However, it can'
        echo '	  still be used for simple request-response protocols (such as OBD II),'
        echo '	  and to monitor broadcast messages on a bus (such as in a vehicle).'
        echo ''
        echo '	  Please refer to the documentation for information on how to use it:'
        echo '	  Documentation/networking/device_drivers/can/can327.rst'
        } >> drivers/net/can/Kconfig

        {
        echo 'obj-y += usb-can-2-module/'
        echo 'obj-y += can-isotp/'
        echo 'obj-$(CONFIG_CAN_CAN327) += can327.o'
        } >> drivers/net/can/Makefile

        cp drivers/net/can/elmcan/can327.c drivers/net/can/
        curl -Lo include/uapi/linux/can/isotp.h https://raw.githubusercontent.com/V0lk3n/can-isotp/master/include/uapi/linux/can/isotp.h
        grep -q "CAN_ISOTP_CF_BROADCAST" include/uapi/linux/can/isotp.h || echo '#define CAN_ISOTP_CF_BROADCAST 0x80' >> include/uapi/linux/can/isotp.h

    - name: Merge patched defconfig into base
      run: |
        BASE_CONFIG="$KERNEL_DIR/arch/arm64/configs/gta9_defconfig"
        PATCHED="$GITHUB_WORKSPACE/gta9_defconfig_patched.config"
        [ -f "$BASE_CONFIG" ] || (echo "Base config missing!" && exit 1)
        grep -vxFf "$BASE_CONFIG" "$PATCHED" >> "$BASE_CONFIG"
        grep -q 'CONFIG_CAN_USB_CAN_2' "$BASE_CONFIG" || echo 'CONFIG_CAN_USB_CAN_2=m' >> "$BASE_CONFIG"
        grep -q 'CONFIG_USB_CAN_2' "$BASE_CONFIG" || echo 'CONFIG_USB_CAN_2=m' >> "$BASE_CONFIG"

    - name: Build kernel
      run: |
        cd $KERNEL_DIR
        mkdir -p $OUT_DIR
        make O=$OUT_DIR ARCH=arm64 CROSS_COMPILE=$CROSS_COMPILE gta9_defconfig
        make -j$(nproc) O=$OUT_DIR ARCH=arm64 CROSS_COMPILE=$CROSS_COMPILE

    - name: Build modules
      run: |
        cd $KERNEL_DIR
        make -j$(nproc) O=$OUT_DIR ARCH=arm64 CROSS_COMPILE=$CROSS_COMPILE modules
        make -j$(nproc) O=$OUT_DIR ARCH=arm64 CROSS_COMPILE=$CROSS_COMPILE INSTALL_MOD_PATH=$OUT_DIR/modules modules_install

    - name: Archive output
      run: |
        cd $OUT_DIR
        mkdir -p $GITHUB_WORKSPACE/output
        cp arch/arm64/boot/Image $GITHUB_WORKSPACE/output/
        cp arch/arm64/boot/dts/*/*.dtb* $GITHUB_WORKSPACE/output/ 2>/dev/null || true
        cp -r modules/lib/modules $GITHUB_WORKSPACE/output/modules
        cd $GITHUB_WORKSPACE
        zip -r kernel_build_output.zip output

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SM-X115-Kernel-Build
        path: kernel_build_output.zip
