name: Build NetHunter Kernel for SM-X115

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 📥 Checkout This Repo
        uses: actions/checkout@v3

      - name: 📥 Clone Kernel Source
        run: |
          mkdir kernel-source
          git clone --depth=1 https://github.com/Anmol6002/kernel_source_sm-x115.git kernel-source

      - name: 🧩 Add CAN support submodules and patch kernel tree
        shell: bash
        run: |
          cd kernel-source
          mkdir -p drivers/net/can include/uapi/linux/can

          git submodule add https://github.com/V0lk3n/usb-can-2-module drivers/net/can/usb-can-2-module || true
          git submodule add https://github.com/V0lk3n/can-isotp drivers/net/can/can-isotp || true
          git submodule add https://github.com/V0lk3n/elmcan drivers/net/can/elmcan || true
          git submodule update --init --recursive

          echo 'source "drivers/net/can/usb-can-2-module/Kconfig"' >> drivers/net/can/Kconfig
          echo 'source "drivers/net/can/can-isotp/Kconfig"' >> drivers/net/can/Kconfig
          echo '' >> drivers/net/can/Kconfig

          echo 'config CAN_CAN327' >> drivers/net/can/Kconfig
          echo '	tristate "Serial / USB serial ELM327 based OBD-II Interfaces (can327)"' >> drivers/net/can/Kconfig
          echo '	depends on TTY' >> drivers/net/can/Kconfig
          echo '	select CAN_RX_OFFLOAD' >> drivers/net/can/Kconfig
          echo '	help' >> drivers/net/can/Kconfig
          echo '	  CAN driver for several '\''low cost'\'' OBD-II interfaces based on the' >> drivers/net/can/Kconfig
          echo '	  ELM327 OBD-II interpreter chip.' >> drivers/net/can/Kconfig
          echo '' >> drivers/net/can/Kconfig
          echo '	  This is a best effort driver - the ELM327 interface was never' >> drivers/net/can/Kconfig
          echo '	  designed to be used as a standalone CAN interface. However, it can' >> drivers/net/can/Kconfig
          echo '	  still be used for simple request-response protocols (such as OBD II),' >> drivers/net/can/Kconfig
          echo '	  and to monitor broadcast messages on a bus (such as in a vehicle).' >> drivers/net/can/Kconfig
          echo '' >> drivers/net/can/Kconfig
          echo '	  Please refer to the documentation for information on how to use it:' >> drivers/net/can/Kconfig
          echo '	  Documentation/networking/device_drivers/can/can327.rst' >> drivers/net/can/Kconfig

          echo 'obj-y += usb-can-2-module/' >> drivers/net/can/Makefile
          echo 'obj-y += can-isotp/' >> drivers/net/can/Makefile
          echo 'obj-$(CONFIG_CAN_CAN327) += can327.o' >> drivers/net/can/Makefile

          cp drivers/net/can/elmcan/can327.c drivers/net/can/
          curl -Lo include/uapi/linux/can/isotp.h https://raw.githubusercontent.com/V0lk3n/can-isotp/master/include/uapi/linux/can/isotp.h

      - name: 🧪 Verify CAN integration
        run: |
         echo "========== Kconfig (last 30 lines) =========="
         tail -n 30 kernel-source/drivers/net/can/Kconfig || echo "❌ Kconfig not found!"

         echo
         echo "========== Makefile (last 10 lines) =========="
         tail -n 10 kernel-source/drivers/net/can/Makefile || echo "❌ Makefile not found!"

         echo
         echo "========== can327.c exists? =========="
         ls -lh kernel-source/drivers/net/can/can327.c || echo "❌ can327.c missing!"

         echo
         echo "========== isotp.h exists? =========="
         ls -lh kernel-source/include/uapi/linux/can/isotp.h || echo "❌ isotp.h missing!"
 
         echo
         echo "========== Cloned CAN submodules =========="
         ls -1 kernel-source/drivers/net/can/ || echo "❌ Submodules missing!"
    
     
      - name: 🛠️ Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential bc bison flex libssl-dev \
            libncurses5-dev libncursesw5-dev git python3 rsync \
            cpio lzop ccache libelf-dev zip

      - name: 🔧 Setup Clang Toolchain (Android U)
        run: |
          git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 clang-toolchain
          echo "CLANG_PATH=$GITHUB_WORKSPACE/clang-toolchain/clang-r487747c" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV

      - name: 🔧 Install GCC Cross-Compiler for Android Kernel 5.15+
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV

      - name: 🩹 Disable ABI Check in Makefiles
        run: |
          grep -rl 'abi_symbollist.raw' kernel-source | while read file; do
            echo "Disabling ABI check in $file"
            sed -i '/abi_symbollist.raw/ s/^/#/' "$file"
          done

      - name: 🧹 Clean Tree (mrproper)
        run: |
          cd kernel-source
          export ARCH=arm64
          export SUBARCH=arm64
          make mrproper

      - name: 🧩 Merge Patched defconfig
        run: |
          cd kernel-source
          export ARCH=arm64
          export SUBARCH=arm64
          make gta9_defconfig
          cp $GITHUB_WORKSPACE/gta9_defconfig_patched.config .
          bash scripts/kconfig/merge_config.sh -m .config gta9_defconfig_patched.config
          cp .config arch/arm64/configs/gta9_defconfig
          make mrproper

      - name: ⚙️ Build Kernel + Modules with Clang
        run: |
          cd kernel-source
          
          export ARCH=arm64
          export SUBARCH=arm64
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CC=$CLANG_PATH/bin/clang
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Optional: Show toolchain versions
          $CC --version
          aarch64-linux-gnu-gcc --version
          
          make O=out gta9_defconfig

          make -j$(nproc) O=out \
            CC=$CC \
            CROSS_COMPILE=$CROSS_COMPILE \
            CLANG_TRIPLE=$CLANG_TRIPLE \
            LD=aarch64-linux-gnu-ld.lld \
            AR=aarch64-linux-gnu-ar \
            NM=aarch64-linux-gnu-nm \
            OBJCOPY=aarch64-linux-gnu-objcopy \
            OBJDUMP=aarch64-linux-gnu-objdump \
            STRIP=aarch64-linux-gnu-strip

          echo "✔️ Kernel compiled successfully!"
          file out/arch/arm64/boot/Image.gz-dtb

          make O=out INSTALL_MOD_PATH=$GITHUB_WORKSPACE/modules modules_install

      - name: 📁 Prepare AnyKernel3 (with modules + init.d)
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git
          cd AnyKernel3
          cp ../kernel-source/out/arch/arm64/boot/Image.gz-dtb zImage
          if [ -d "$GITHUB_WORKSPACE/modules/lib/modules" ]; then
            mkdir -p modules
            find $GITHUB_WORKSPACE/modules/lib/modules/ -name '*.ko' -exec cp {} modules/ \;
          fi
          sed -i 's/MODULES=false/MODULES=true/' anykernel.sh
          sed -i 's/INITD=false/INITD=true/' anykernel.sh
          mkdir -p init.d
          echo -e '#!/system/bin/sh\necho "NetHunter init.d test script ran at boot."' > init.d/99nethunter.sh
          chmod +x init.d/99nethunter.sh

      - name: 🧾 Add NetHunter Kernel Props (Magisk detection)
        run: |
          cd AnyKernel3
          echo "nethunter.kernel=1" > default.prop
          echo "nethunter.kernel.version=SM-X115-$(date +%Y%m%d)" >> default.prop
          echo "nethunter.kernel.initd=1" >> default.prop
          echo "nethunter.kernel.usbgadget=1" >> default.prop
          echo "nethunter.kernel.modules=1" >> default.prop

      - name: 📦 Create Flashable Kernel Zip
        run: |
          cd AnyKernel3
          zip -r9 NetHunter-Kernel-SMX115.zip * -x '*.git*' README.md *.md

      - name: ☁️ Upload Flashable Kernel
        uses: actions/upload-artifact@v4
        with:
          name: NetHunter-Kernel-SMX115
          path: AnyKernel3/NetHunter-Kernel-SMX115.zip
