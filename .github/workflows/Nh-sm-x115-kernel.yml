name: Build NetHunter Kernel for SM-X115

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 📥 Checkout This Repo
        uses: actions/checkout@v3

      - name: 📥 Clone Kernel Source
        run: |
          mkdir kernel-source
          git clone --depth=1 https://github.com/Anmol6002/kernel_source_sm-x115.git kernel-source

      - name: 🧩 Add CAN support submodules and patch kernel tree
        shell: bash
        run: |
          cd kernel-source
          mkdir -p drivers/net/can include/uapi/linux/can

          git submodule add https://github.com/V0lk3n/usb-can-2-module drivers/net/can/usb-can-2-module || true
          git submodule add https://github.com/V0lk3n/can-isotp drivers/net/can/can-isotp || true
          git submodule add https://github.com/V0lk3n/elmcan drivers/net/can/elmcan || true
          git submodule update --init --recursive

          echo 'source "drivers/net/can/usb-can-2-module/Kconfig"' >> drivers/net/can/Kconfig
          echo 'source "drivers/net/can/can-isotp/Kconfig"' >> drivers/net/can/Kconfig
          echo '' >> drivers/net/can/Kconfig

          echo 'config CAN_CAN327' >> drivers/net/can/Kconfig
          echo '	tristate "Serial / USB serial ELM327 based OBD-II Interfaces (can327)"' >> drivers/net/can/Kconfig
          echo '	depends on TTY' >> drivers/net/can/Kconfig
          echo '	select CAN_RX_OFFLOAD' >> drivers/net/can/Kconfig
          echo '	help' >> drivers/net/can/Kconfig
          echo '	  CAN driver for several '\''low cost'\'' OBD-II interfaces based on the' >> drivers/net/can/Kconfig
          echo '	  ELM327 OBD-II interpreter chip.' >> drivers/net/can/Kconfig
          echo '' >> drivers/net/can/Kconfig
          echo '	  This is a best effort driver - the ELM327 interface was never' >> drivers/net/can/Kconfig
          echo '	  designed to be used as a standalone CAN interface. However, it can' >> drivers/net/can/Kconfig
          echo '	  still be used for simple request-response protocols (such as OBD II),' >> drivers/net/can/Kconfig
          echo '	  and to monitor broadcast messages on a bus (such as in a vehicle).' >> drivers/net/can/Kconfig
          echo '' >> drivers/net/can/Kconfig
          echo '	  Please refer to the documentation for information on how to use it:' >> drivers/net/can/Kconfig
          echo '	  Documentation/networking/device_drivers/can/can327.rst' >> drivers/net/can/Kconfig

          echo 'obj-y += usb-can-2-module/' >> drivers/net/can/Makefile
          echo 'obj-y += can-isotp/' >> drivers/net/can/Makefile
          echo 'obj-$(CONFIG_CAN_CAN327) += can327.o' >> drivers/net/can/Makefile

          cp drivers/net/can/elmcan/can327.c drivers/net/can/
          curl -Lo include/uapi/linux/can/isotp.h https://raw.githubusercontent.com/V0lk3n/can-isotp/master/include/uapi/linux/can/isotp.h

      - name: 🧪 Verify CAN integration
        run: |
         echo "========== Kconfig (last 30 lines) =========="
         tail -n 30 kernel-source/drivers/net/can/Kconfig || echo "❌ Kconfig not found!"

         echo
         echo "========== Makefile (last 10 lines) =========="
         tail -n 10 kernel-source/drivers/net/can/Makefile || echo "❌ Makefile not found!"

         echo
         echo "========== can327.c exists? =========="
         ls -lh kernel-source/drivers/net/can/can327.c || echo "❌ can327.c missing!"

         echo
         echo "========== isotp.h exists? =========="
         ls -lh kernel-source/include/uapi/linux/can/isotp.h || echo "❌ isotp.h missing!"
 
         echo
         echo "========== Cloned CAN submodules =========="
         ls -1 kernel-source/drivers/net/can/ || echo "❌ Submodules missing!"

      - name: 🛠️ Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential bc bison flex libssl-dev \
            libncurses5-dev libncursesw5-dev git python3 rsync \
            cpio lzop ccache libelf-dev zip

      - name: 🔧 Install GCC Cross-Compiler for Android Kernel
        run: |
         sudo apt update
         sudo apt install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
         echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV

      

      - name: 🩹 Disable ABI Check in Makefiles
        run: |
          grep -rl 'abi_symbollist.raw' kernel-source | while read file; do
            echo "Disabling ABI check in $file"
            sed -i '/abi_symbollist.raw/ s/^/#/' "$file"
          done

      - name: 🧹 Clean Tree (mrproper)
        run: |
          cd kernel-source
          export ARCH=arm64
          export SUBARCH=arm64
          make mrproper

      - name: 🧩 Merge NetHunter Patches into Kernel defconfig
        run: |
         cd kernel-source
         export ARCH=arm64
         export SUBARCH=arm64
         export CROSS_COMPILE=aarch64-linux-gnu-
         

         echo "🧹 Resetting original defconfig"
         make gta9_defconfig

         echo "🛠️ Cleaning up INIT_STACK_ entries before merge"
         sed -i '/^CONFIG_INIT_STACK_/d' arch/arm64/configs/gta9_defconfig || true
         sed -i '/^CONFIG_INIT_STACK_/d' $GITHUB_WORKSPACE/gta9_defconfig_patched.config || true
         echo 'CONFIG_INIT_STACK_ALL_ZERO=y' >> $GITHUB_WORKSPACE/gta9_defconfig_patched.config

         echo "🧩 Merging NetHunter config..."
         cp $GITHUB_WORKSPACE/gta9_defconfig_patched.config .
         bash scripts/kconfig/merge_config.sh -m .config gta9_defconfig_patched.config

         echo "⚙️ Resolving final config..."
         make olddefconfig

         echo "💾 Saving merged config to gta9_defconfig"
         cp .config arch/arm64/configs/gta9_defconfig

      - name: 🧼 Clean After Merging defconfig
        run: |
         cd kernel-source
         export ARCH=arm64
         export SUBARCH=arm64
         make mrproper
  
      - name: 🧹 Fix Kconfig newline warning
        run: |
          cd kernel-source
          echo >> drivers/gpu/drm/mediatek/Kconfig
          
      - name: 🛠️ Final Kernel Patches and Fixes
        run: |
          echo "✅ Using gta9_defconfig with manual patches"
          DEFCONFIG="kernel-source/arch/arm64/configs/gta9_defconfig"

          echo "🧹 Sorting and cleaning defconfig"
          sort -u "$DEFCONFIG" -o "$DEFCONFIG"

          echo "⚙️ Ensuring CAN macro exists"
          CAN_HEADER="kernel-source/include/uapi/linux/can/isotp.h"
          grep -q "CAN_ISOTP_CF_BROADCAST" "$CAN_HEADER" || echo '#define CAN_ISOTP_CF_BROADCAST 0x80' >> "$CAN_HEADER"

          echo "✅ Final patching step complete!"

      - name: 🔍 Locate risky strncpy usage
        run: |
         cd kernel-source
         grep -rn 'strncpy' drivers/ include/ || echo "No strncpy found"
         
      - name: 🧼 Clean Tree and Recreate Output Dir
        run: |
         cd kernel-source
         make mrproper
         rm -rf out
         mkdir -p out

      - name: 🛠 Patch printk %u + u64 format issues
        run: |
         echo "🔍 Searching for unsafe printk %%u usage with u64-type vars..."

         U64_HINTS="time|timestamp|ino|offset|chunk|value|size|bytes|ratio|cold"
         find . -type f \( -name "*.c" -o -name "*.h" \) > all_files.txt

         echo "🔐 Backing up all .c/.h files before patching..."
         for f in $(cat all_files.txt); do cp "$f" "$f.bak"; done

         echo "⚙️  Scanning for printk() or pr_*() using %u with u64-ish args..."
         grep -PnH 'printk\(.*%u.*\b('"$U64_HINTS"')\b' -f all_files.txt > suspicious_lines.txt || true
         grep -PnH 'pr_.*\(.*%u.*\b('"$U64_HINTS"')\b' -f all_files.txt >> suspicious_lines.txt || true

         echo "🔧 Replacing '%u' with '%llu' and casting args to (unsigned long long)..."
         while IFS= read -r line; do
         file=$(echo "$line" | cut -d':' -f1)
         lineno=$(echo "$line" | cut -d':' -f2)
         content=$(sed "${lineno}q;d" "$file")

         modified=$(echo "$content" | sed 's/%u/%llu/')

         modified=$(echo "$modified" | sed -E "s/([, \(])\s*($U64_HINTS)\b/\1(unsigned long long) \2/")

         echo "$modified" | sed "${lineno}s/.*/$(sed 's/[&/\]/\\&/g' <<< "$modified")/" -i "$file"
         echo "✅ Patched $file:$lineno"
         done < suspicious_lines.txt

         echo "🎉 All potential %u + u64 format errors fixed with casting."
         echo "📝 Review changes with '.bak' backups before committing."
      
      - name: ⚙️ Build Kernel + Modules with GCC
        run: |
         cd kernel-source
         export ARCH=arm64
         export SUBARCH=arm64
         export CROSS_COMPILE=$CROSS_COMPILE
         echo "📄 Using merged gta9_defconfig"
         
         cp arch/arm64/configs/gta9_defconfig out/.config
         make O=out olddefconfig

         echo "🔨 Starting kernel build..."
         make -j$(nproc) O=out \
         CROSS_COMPILE=$CROSS_COMPILE \
         2>&1 | tee out/build.log || true

         echo "📦 Attempting modules_install..."
         make O=out INSTALL_MOD_PATH=$GITHUB_WORKSPACE/modules modules_install 2>&1 | tee -a out/build.log || true

         echo "🧾 Kernel Build Summary (errors & warnings):"
         echo "========== ERRORS =========="
         grep -i "error:" out/build.log || echo "✅ No build errors found."
         echo "========== WARNINGS =========="
         grep -i "warning:" out/build.log || echo "✅ No build warnings found."
         echo "📦 Verifying build outputs..."

         file out/arch/arm64/boot/Image || echo "❌ Kernel Image not found!"
         [ -f out/.config ] && echo "✅ Kernel config (.config) found." || echo "❌ .config not found!"
         find $GITHUB_WORKSPACE/modules -name '*.ko' | grep -q . && echo "✅ Kernel modules (*.ko) found." || echo "⚠️ No kernel modules found."

      - name: 🧪 Scan for Format Specifier Type Mismatches
        run: |
         cd kernel-source
         echo "🧪 Checking printk/pr_* with %u and u64..."
         grep -RinP 'printk\s*\(.*%u' kernel/ include/ | grep -C 3 -i 'u64' || echo "✅ No printk %u + u64 issue"
         grep -RinP 'pr_\w+\s*\(.*%u' kernel/ include/ | grep -C 3 -i 'u64' || echo "✅ No pr_* %u + u64 issue"
         

      - name: 📥 Download dtbo.img from GitHub Release
        run: |
         curl -L -o kernel-source/out/arch/arm64/boot/dtbo.img \
         https://github.com/Anmol6002/nethunter-kernel-smx115/releases/download/v1.0-dtbo/dtbo.img

      - name: 📦 Create Image.gz-dtb if missing
        run: |
          cd kernel-source
          if [ ! -f out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "⚠️ Image.gz-dtb not found. Trying to generate..."
            if [ -f out/arch/arm64/boot/Image ] && [ -f out/arch/arm64/boot/dtbo.img ]; then
              echo "✅ Found Image and dtbo.img, creating Image.gz-dtb"
              gzip -c out/arch/arm64/boot/Image > out/arch/arm64/boot/Image.gz
              cat out/arch/arm64/boot/Image.gz out/arch/arm64/boot/dtbo.img > out/arch/arm64/boot/Image.gz-dtb
            else
              echo "❌ Required Image or dtbo.img not found. Kernel image creation failed."
              exit 1
            fi
          fi

      - name: ⬅️ Return to Workspace Root
        run: cd $GITHUB_WORKSPACE

      - name: 📁 Prepare AnyKernel3 (with modules + init.d)
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git
          cd AnyKernel3
          
          # ✅ Copy zImage
          cp ../kernel-source/out/arch/arm64/boot/Image.gz-dtb zImage || { echo "❌ Image.gz-dtb missing!"; exit 1; }
          
          # ✅ Copy modules if available
          if [ -d "$GITHUB_WORKSPACE/modules/lib/modules" ]; then
            echo "📦 Copying modules..."
            mkdir -p modules
            find $GITHUB_WORKSPACE/modules/lib/modules/ -name '*.ko' -exec cp {} modules/ \;
          else
            echo "⚠️ No modules directory found — skipping module copy."
          fi

          # ✅ Enable modules and init.d in anykernel.sh
          sed -i 's/MODULES=false/MODULES=true/' anykernel.sh
          sed -i 's/INITD=false/INITD=true/' anykernel.sh

          # ✅ Add test init.d script
          mkdir -p init.d
          echo -e '#!/system/bin/sh\necho "NetHunter init.d test script ran at boot."' > init.d/99nethunter.sh
          chmod +x init.d/99nethunter.sh
          
          # ✅ Add kernel config.gz (for inspection/debugging)
          cp ../kernel-source/out/.config config.gz
          gzip -f config.gz

      - name: 🧾 Add NetHunter Kernel Props (Magisk detection)
        run: |
          cd AnyKernel3
          echo "nethunter.kernel=1" > default.prop
          echo "nethunter.kernel.version=SM-X115-$(date +%Y%m%d)" >> default.prop
          echo "nethunter.kernel.initd=1" >> default.prop
          echo "nethunter.kernel.usbgadget=1" >> default.prop
          echo "nethunter.kernel.modules=1" >> default.prop

      - name: 📦 Create Flashable Kernel Zip
        run: |
          cd AnyKernel3
          zip -r9 NetHunter-Kernel-SMX115.zip * -x '*.git*' README.md *.md

      - name: ☁️ Upload Flashable Kernel
        uses: actions/upload-artifact@v4
        with:
          name: NetHunter-Kernel-SMX115
          path: AnyKernel3/NetHunter-Kernel-SMX115.zip

      - name: 📤 Upload Full Build Log
        uses: actions/upload-artifact@v4
        with:
          name: full-build-log
          path: kernel-source/out/build.log
